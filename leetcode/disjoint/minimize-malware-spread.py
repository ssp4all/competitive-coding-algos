https://leetcode.com/problems/minimize-malware-spread/

"""
In a network of nodes, each node i is directly connected to another node j if and only 
if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are directly 
connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  
This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network, 
after the spread of malware stops.

We will remove one node from the initial list.  Return the node that if removed, would 
minimize M(initial).  If multiple nodes could be removed to minimize M(initial), 
return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it may still 
be infected later as a result of the malware spread.

 

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0
"""
class DSU:
    def __init__(self, n):
        self.parent = [i for i in range(n)]

    
    def find(self, x):
        if x != self.parent[x]:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
    
    def union(self, x, y):
        px, py = self.find(x), self.find(y)
        self.parent[px] = py

    
    
class Solution:
    
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        if not graph or not graph[0]:  return 0 #no sense
        
        n = len(graph)
        
        uf = DSU(n)
        
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1:
                    uf.union(i, j)

        area = Counter(uf.find(i) for i in range(n))
        malware = Counter(uf.find(i) for i in initial)
        
        prev, res = 0, min(initial)
        for i in initial:
            if malware[uf.find(i)] == 1:
                if area[uf.find(i)] > prev:
                    prev = area[uf.find(i)]
                    res = i
                elif area[uf.find(i)] == prev:
                    res = min(res, i)
        return res
        
            
            